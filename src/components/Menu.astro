---
const navItems = [
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/#proyectos",
  },
  {
    title: "Sobre mi",
    label: "sobre-mi",
    url: "/#sobre-mi",
  },
];
---

<ul class="flex my-auto  gap-4 text-base font-medium">
  {
    navItems.map((link) => (
      <a
        class="transition hover:text-purple-500 dark:hover:text-purple-400"
        aria-label={link.label}
        href={link.url}
      >
        {link.title}
      </a>
    ))
  }
</ul>
<script>
  // document.addEventListener("astro:page-load", () => {
  const sections = document.querySelectorAll("section");
  const navItems = document.querySelectorAll("ul a");

  const callback = (entries: any[]) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        /**
         * Para cada elemento del menú de navegación, se compara su atributo aria-label con el id del
         * elemento <section> que está intersectando. Si coinciden, se añade la clase CSS "text-purple-500"
         */
        navItems.forEach((item) => {
          if (item.getAttribute("aria-label") == entry.target.id) {
            item.classList.add("text-purple-500");
          } else {
            item.classList.remove("text-purple-500");
          }
        });
      }
    });
  };

  const observer = new IntersectionObserver(callback, {
    root: null, //ndica que el contenedor raíz utilizado para calcular la intersección es el viewport (la ventana del navegador)
    rootMargin: "20px",
    threshold: 0.3, //indica que la función de devolución de llamada se ejecutará cuando el 40% del elemento sea visible en el viewport.
  });

  sections.forEach((section) => {
    observer.observe(section);
  });

  // Cleanup function
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      sections.forEach((section) => {
        observer.observe(section);
      });
    }
  };
  // })
</script>

<style></style>
